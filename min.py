import logging
import os
import pyodbc
import smtplib
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from email.message import EmailMessage
from dotenv import load_dotenv

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)    

@dp.message_handler(commands=['asis','a'])
async def asis_menu(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /asis.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /asis.
    """
    await asis_actions_menu(message)


async def asis_actions_menu(message: types.Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /asis.
    """
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button11 = types.InlineKeyboardButton(text="–°–∞–º—ã–µ —á–∞—Å—Ç–æ –∑–∞–¥–æ–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì‚ùî", callback_data="asis_action1")
    button22 = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ üì¨", callback_data="asis_action2")
    keyboard.add(button11)
    keyboard.add(button22)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–¥–∂! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å.\n"
                        "–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã "
                        "–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
                        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö. –£–¥–∞—á–∏ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏!", reply_markup=keyboard)

@dp.message_handler(commands=['start','s'])
async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    keyboard.add(button)

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç–∞–∫–æ–π –∫–∞–∫ —Å—Ä–æ–∫–∏ –∑–∞—â–∏—Ç—ã –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤, —Å—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–π –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫. –î–ª—è –∞–±–∏—Ç—É—Ä—å–µ–Ω—Ç–æ–≤ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤.\n\n–≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —ç—Ç–æ–≥–æ:", reply_markup=keyboard)


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Access –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫...")
    contact = message.contact
    phone_number = contact.phone_number
    user_id = message.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Access
    conn_str = (r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
            r'DBQ=C:\dev\progect_telega\–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –ö–æ–ª–µ–¥–∂–∞.accdb;')
    conn = pyodbc.connect(conn_str)


# –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute("SELECT –§–ò–û, –ì—Ä—É–ø–ø–∞ FROM –°—Ç—É–¥–µ–Ω—Ç—ã WHERE [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] = ?", (phone_number,))
    result = cursor.fetchone()

    
    if result:
        # –ù–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        full_name = result[0]  # –ü–æ–ª—É—á–∞–µ–º –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞
        group = result[1]  # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞

        response_message = f"–ù–∞—à—ë–ª –≤–∞—Å, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º: \n {full_name}, –≥—Ä—É–ø–ø—ã {group}."
        await message.answer(response_message)
    else:
        # –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        await message.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await asis_menu(message)
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM –°—Ç—É–¥–µ–Ω—Ç—ã WHERE [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]=?", (phone_number,))
    result = cursor.fetchone()
    
    if result:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ID
        existing_id = result.ID
        if existing_id:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ ID, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            await menu(message)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ID –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            cursor.execute("UPDATE –°—Ç—É–¥–µ–Ω—Ç—ã SET ID=? WHERE [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]=?", (user_id, phone_number))
            conn.commit()
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            await menu(message)

      
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    conn.close()

@dp.message_handler(commands=['menu','m'])
async def menu(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    """
    user_id = message.from_user.id
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Access
    conn_str = (r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
            r'DBQ=C:\dev\progect_telega\–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –ö–æ–ª–µ–¥–∂–∞.accdb;')
    conn = pyodbc.connect(conn_str)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM –°—Ç—É–¥–µ–Ω—Ç—ã WHERE ID=?", (user_id,))
    result = cursor.fetchone()

    if result:
     # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        menu_keyboard = InlineKeyboardMarkup(row_width=2)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        button1 = InlineKeyboardButton("–û–±—â—è—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üóÉ", callback_data="button1")
        button2 = InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìã", callback_data="button2")
        button3 = InlineKeyboardButton("–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å üìï", callback_data="button3")
        button4 = InlineKeyboardButton("–î–æ–≥–æ–≤–æ—Ä—ã üìù", callback_data="button4")
        button5 = InlineKeyboardButton("–ü—Ä–∏–∫–∞–∑—ã üìÇ", callback_data="button5")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
        menu_keyboard.add(button1)
        menu_keyboard.add(button2,button3,button4,button5)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ /menu –∏–ª–∏ /m\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=menu_keyboard)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
        await start(message)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'button4')
async def handle_button1(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Access
    conn_str = (r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
                r'DBQ=C:\dev\progect_telega\–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –ö–æ–ª–µ–¥–∂–∞.accdb;')
    conn = pyodbc.connect(conn_str)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ "–°—Ç—É–¥–µ–Ω—Ç—ã"
    cursor = conn.cursor()
    cursor.execute("SELECT [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] FROM –°—Ç—É–¥–µ–Ω—Ç—ã WHERE ID=?", (user_id,))
    result = cursor.fetchone()

    if result:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = result[0]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã WHERE [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞] = ?", (phone_number,))
        info_result = cursor.fetchone()

        if info_result:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
            data1 = info_result[2]
            data2 = info_result[3]
            data3 = info_result[4]
            data4 = info_result[5]
            data5 = info_result[6]
            data6 = info_result[7]
            

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = f"üîñ –í–∞—à –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç:\n\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data1}\n\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {data2}\n\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {data3}\n\n–î–∞—Ç–∞ –æ–∫–∞–Ω—á–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {data4}\n\n–ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã: {data5}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã: {data6}(—Ç–µ–Ω—å–≥–µ) "

            await bot.send_message(callback_query.from_user.id, response)
        else:
            await bot.send_message(callback_query.from_user.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'.")
    else:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '–°—Ç—É–¥–µ–Ω—Ç—ã'.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
    await callback_query.answer()

    cursor.close()
    conn.close()




@dp.callback_query_handler(lambda callback_query: callback_query.data == 'button5')
async def handle_button5(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Access
    conn_str = (r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
                r'DBQ=C:\dev\progect_telega\–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –ö–æ–ª–µ–¥–∂–∞.accdb;')
    conn = pyodbc.connect(conn_str)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ "–°—Ç—É–¥–µ–Ω—Ç—ã"
    cursor = conn.cursor()
    cursor.execute("SELECT [–§–ò–û] FROM –°—Ç—É–¥–µ–Ω—Ç—ã WHERE ID=?", (user_id,))
    result = cursor.fetchone()

    if result:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = result[0]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ "–ü—Ä–∏–∫–∞–∑—ã"
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM –ü—Ä–∏–∫–∞–∑—ã WHERE [–§–ò–û] = ?", (phone_number,))
        orders = cursor.fetchall()

        if orders:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = "üóÑ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∫–∞–∑–æ–≤:\n\n"
            for order in orders:
                order_data = f"{order[1]}-{order[2]}\n{order[3]}({order[4]})\n\n"
                response += order_data

            await bot.send_message(callback_query.from_user.id, response)
        else:
            await bot.send_message(callback_query.from_user.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '–ü—Ä–∏–∫–∞–∑—ã'.")
    else:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '–°—Ç—É–¥–µ–Ω—Ç—ã'.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
    await callback_query.answer()

    cursor.close()
    conn.close()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'button1')
async def handle_button1(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Access
    conn_str = (r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
                r'DBQ=C:\dev\progect_telega\–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –ö–æ–ª–µ–¥–∂–∞.accdb;')
    conn = pyodbc.connect(conn_str)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ "–°—Ç—É–¥–µ–Ω—Ç—ã"
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM –°—Ç—É–¥–µ–Ω—Ç—ã WHERE ID=?", (user_id,))
    result = cursor.fetchone()

    if result:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
        fio = result[1]
        group = result[2]
        specialization = result[3]
        department = result[4]
        organization = result[5]
        education_form = result[6]
        student_card_number = result[7]
        student_id_number = result[8]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        response = f"üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:\n\n" \
                   f"–§–ò–û: {fio}\n\n" \
                   f"–ì—Ä—É–ø–ø–∞: {group}\n\n" \
                   f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialization}\n\n" \
                   f"–û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}\n\n" \
                   f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization}\n\n" \
                   f"–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {education_form}\n\n" \
                   f"–ù–æ–º–µ—Ä –∑–∞—á—ë—Ç–∫–∏: {student_card_number}\n\n" \
                   f"–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞: {student_id_number}"

        await bot.send_message(callback_query.from_user.id, response)
    else:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '–°—Ç—É–¥–µ–Ω—Ç—ã'.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
    await callback_query.answer()

    cursor.close()
    conn.close()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'button3')
async def handle_button3(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Access
    conn_str = (r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
                r'DBQ=C:\dev\progect_telega\–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –ö–æ–ª–µ–¥–∂–∞.accdb;')
    conn = pyodbc.connect(conn_str)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ "–°—Ç—É–¥–µ–Ω—Ç—ã"
    cursor = conn.cursor()
    cursor.execute("SELECT [–§–ò–û] FROM –°—Ç—É–¥–µ–Ω—Ç—ã WHERE ID=?", (user_id,))
    result = cursor.fetchone()

    if result:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –§–ò–û
        fio = result[0]

        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –§–ò–û –≤ —Ç–∞–±–ª–∏—Ü–µ "–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å"
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å WHERE [–§–ò–û] = ?", (fio,))
        rows = cursor.fetchall()

        if rows:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫
            response = ""
            semester_displayed = False  # Flag variable to track if "1 —Å–µ–º–µ—Å—Ç—Ä 2022|2023" has been displayed

            for row in rows:
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
                if not semester_displayed:
                    response += "üîî1 —Å–µ–º–µ—Å—Ç—Ä 2022|2023\n"
                    semester_displayed = True

                order_data = f"{row[1]} ({row[2]})\n{row[3]}\n\n{row[4]}\n\n"
                response += order_data

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(callback_query.from_user.id, response)
        else:
            await bot.send_message(callback_query.from_user.id, f"–§–ò–û '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ '–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å'.")
    else:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '–°—Ç—É–¥–µ–Ω—Ç—ã'.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
    await callback_query.answer()

    cursor.close()
    conn.close()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'button2')
async def handle_button3(callback_query: types.CallbackQuery):
    # Path to the PDF file
    file_path = r'C:\dev\progect_telega\–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π_2–ø–æ–ª—É–≥–æ–¥–∏–µ.pdf'

    # Check if the file exists
    if os.path.exists(file_path):
        # Send the PDF file as a document
        await bot.send_document(callback_query.from_user.id, open(file_path, 'rb'), caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π")
    else:
        await bot.send_message(callback_query.from_user.id, "The schedule file is not available.")

    # Complete the callback_query processing
    await callback_query.answer()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'asis_action1')
async def handle_button11(callback_query: types.CallbackQuery):
    response_text = """
    –ü—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–¥–∂ –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —à–∫–æ–ª–∞-–∏–Ω—Ç–µ—Ä–Ω–∞—Ç –¥–ª—è –æ–¥–∞—Ä–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π" –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —Å–∞–º—ã—Ö —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö:

    1. –ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–ª–ª–µ–¥–∂–µ?
       –í –Ω–∞—à–µ–º –∫–æ–ª–ª–µ–¥–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º, –≤–æ–∫–∞–ª—É, –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–∏—Ä–∏–∂–∏—Ä–æ–≤–∞–Ω–∏—é, –∞ —Ç–∞–∫–∂–µ –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–º –∏–∑—É—á–µ–Ω–∏–µ–º –º—É–∑—ã–∫–∏.

    2. –ö–∞–∫–æ–≤—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?
       –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è. –û–±—ã—á–Ω–æ –æ–Ω–∏ –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –∏–ª–∏ –≤–æ–∫–∞–ª–µ, –∞ —Ç–∞–∫–∂–µ —Å–¥–∞—á—É –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤ –ø–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Ç–µ–æ—Ä–∏–∏ –∏ —Å–ª—É—Ö—É.

    3. –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–¥–∂?
       –í –∫–æ–ª–ª–µ–¥–∂–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å –æ–ø—ã—Ç–Ω—ã–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏, —É—á–∞—Å—Ç–∏–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ö, –∞–Ω—Å–∞–º–±–ª—è—Ö –∏ —Ö–æ—Ä–∞—Ö, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –º—É–∑—ã–∫–∞–Ω—Ç–∞–º–∏.

    4. –ö–∞–∫–æ–≤—ã —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ —à–∫–æ–ª–µ-–∏–Ω—Ç–µ—Ä–Ω–∞—Ç–µ?
       –®–∫–æ–ª–∞-–∏–Ω—Ç–µ—Ä–Ω–∞—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –í—Å–µ —É—á–µ–Ω–∏–∫–∏ –∏–º–µ—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞—Ç—å –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏, –≥–¥–µ –æ–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–æ–º—Ñ–æ—Ä—Ç –∏ –∑–∞–±–æ—Ç—É. –û–±—â–µ–∂–∏—Ç–∏–µ –æ—Å–Ω–∞—â–µ–Ω–æ –≤—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –≤–∫–ª—é—á–∞—è –æ–±—â–∏–µ –∑–æ–Ω—ã –æ—Ç–¥—ã—Ö–∞, —Å—Ç–æ–ª–æ–≤—É—é –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏.

    5. –ö–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç–∞–º?
       –ù–∞—à –∫–æ–ª–ª–µ–¥–∂ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è—Ö, –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–æ–ª–ª–µ–¥–∂–∞, —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö –∏ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∏ —Ä–µ—Å—É—Ä—Å–∞–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏.

    –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º –æ–±—É—á–µ–Ω–∏—è –≤ –≤–∞—à–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–æ–ª–ª–µ–¥–∂–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–ª–ª–µ–¥–∂–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏–∏.
    """

    await bot.send_message(callback_query.from_user.id, response_text)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query
    await callback_query.answer()


# Define the states for the conversation
class ApplicationForm(StatesGroup):
    NAME = State()
    BIRTHDATE = State()
    PHONE = State()
    EMAIL = State()
    INSTRUMENT = State()
    EDUCATION = State()
    ACHIEVEMENTS = State()
    MOTIVATION = State()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'asis_action2')
async def handle_button22(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    # Access the message from the callback query
    message = callback_query.message
    await message.answer(
        "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
        "\n\n1. –ü–æ–ª–Ω–æ–µ –∏–º—è (–∏–º—è,—Ñ–∞–º–∏–ª–∏—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ):"
    )
    await ApplicationForm.NAME.set()


@dp.message_handler(state=ApplicationForm.NAME)
async def collect_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text

    await message.answer("2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–æ–¥-–ú–µ—Å—è—Ü-–î–µ–Ω—å):")
    await ApplicationForm.BIRTHDATE.set()


@dp.message_handler(state=ApplicationForm.BIRTHDATE)
async def collect_birthdate(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["birthdate"] = message.text

    await message.answer("3. –ù–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await ApplicationForm.PHONE.set()


@dp.message_handler(state=ApplicationForm.PHONE)
async def collect_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["phone"] = message.text

    await message.answer("4. –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await ApplicationForm.EMAIL.set()


@dp.message_handler(state=ApplicationForm.EMAIL)
async def collect_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["email"] = message.text

    await message.answer("5. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:")
    await ApplicationForm.INSTRUMENT.set()


@dp.message_handler(state=ApplicationForm.INSTRUMENT)
async def collect_instrument(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["instrument"] = message.text

    await message.answer("6. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:")
    await ApplicationForm.EDUCATION.set()


@dp.message_handler(state=ApplicationForm.EDUCATION)
async def collect_education(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["education"] = message.text

    await message.answer("7. –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
    await ApplicationForm.ACHIEVEMENTS.set()


@dp.message_handler(state=ApplicationForm.ACHIEVEMENTS)
async def collect_achievements(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["achievements"] = message.text

    await message.answer("8. –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await ApplicationForm.MOTIVATION.set()


@dp.message_handler(state=ApplicationForm.MOTIVATION)
async def collect_motivation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["motivation"] = message.text

    # Process the collected data (optional step)
    collected_data = "\n".join([f"{key}: {value}" for key, value in data.items()])

    # Sending the collected data via email (optional)
    # Replace the placeholder values with your own email configuration
    sender_email = os.getenv("SENDER_EMAIL")
    receiver_email = os.getenv("RECEIVER_EMAIL")
    email_password = os.getenv("EMAIL_PASSWORD")
    smtp_server = "smtp.mail.ru"
    email_subject = "Application Data"

    msg = EmailMessage()
    msg.set_content(collected_data)
    msg["Subject"] = email_subject
    msg["From"] = sender_email
    msg["To"] = receiver_email

    try:
        with smtplib.SMTP_SSL(smtp_server, 465) as server:
            server.login(sender_email, email_password)
            server.send_message(msg)

        await state.finish()
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–¥–∞–Ω–æ!"
        )

    except smtplib.SMTPException:
        await message.answer(
            "–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        )

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    # Finish the conversation and reset the state
    await state.finish()
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
